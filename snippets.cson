# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.js':
  'Beans!':
    'prefix': 'Beans'
    'body': 'console.log(\'Beans!\');'
  'Rats!':
    'prefix': 'Rats'
    'body': 'console.log(\'Rats!\');'
  #Bx Slider Snippets
  'Bx Slider Template':
    'prefix': 'New Bx Slider'
    'body': """
      jQuery(document).ready(function() {
        jQuery('').bxSlider({
          speed: 500,
          mode: 'horizontal',
          slideMargin: 0,
          startslide: 0,
          randomStart: false,
          slideSelector: '',
          infiniteLoop: true,
          hideControlOnEnd: false,
          easing: null,
          captions: false,
          ticker: false,
          tickerHover: false,
          adaptiveHeight: false,
          adaptiveHeightSpeed: 500,
          video: false,
          responsive: true,
          useCSS: true,
          preloadImages: 'visible',
          touchEnabled: true,
          swipeThreshold: 50,
          oneToOneTouch: true,
          preventDefaultSwipeX: true,
          preventDefaultSwipeY: false,
          wrapperClass: 'bx-wrapper',
          pager: true,
          pagerType: 'full',
          pagerShortSeparator: '/',
          pagerSelector: '',
          pagerCustom: null,
          buildPager: null,
          controls: true,
          nextText: 'Next',
          prevText: 'Prev',
          nextSelector: null,
          prevSelector: null,
          autoControls: false,
          startText: 'Start',
          stopText: 'Stop',
          autoControlsCombine: false,
          autoControlsSelector: null,
          keyboardEnabled: false,
          auto: false,
          stopAutoOnClick: false,
          pause: 4000,
          autoStart: true,
          autoDirection: 'next',
          autoHover: false,
          autoDelay: 0,
          minSlides: 1,
          masSlides: 1,
          moveSlides: 0,
          slideWidth: 0,
          shrinkItems: false,
          ariaLive: true,
          ariaHidden: true
        });
      });
      """
    # Comment Template
  'Comment Template' :
    'prefix': 'Comment'
    'body': """
      // =============================================================================
      // Comment Goes Here ===========================================================
      """

# Php Stuff
'.text.html.php':
  # Short Code Template
  'Shortcode Template':
    'prefix': 'New ShortCode'
    'body': """
        function shortCodeTemplate( $atts ) {
          ob_start();

          $query = new WP_Query( array(
              'post_type' => 'Posts',
              'order' => 'ASC',
              'posts_per_page' => '-1',
          ) );
          if ( $query->have_posts() ) { ?>

                  <?php $incrementNum = 0; ?>
                  <?php while ( $query->have_posts()) : $query->the_post(); ?>
                    <?php $postUrl = get_permalink(); ?>
                    <?php $title = get_the_title();  ?>
                    <?php $date =  get_the_date(); ?>
                    <?php $category = get_the_category(); ?>
                    <?php $thumbnailUrl = wp_get_attachment_image_src( get_post_thumbnail_id($post->ID), 'XXCustomImageSizeXX' )[0]; ?>

                    <div>
                      Html Here
                    </div>

                    <?php $incrementNum++; ?>
                  <?php endwhile;
                  wp_reset_postdata(); ?>

          <?php $myvariable = ob_get_clean();
          return $myvariable;
          }
      }
      add_shortcode( 'Shortcode Name Here', 'shortCodeTemplate' );
      """
  # Comment Template
  'Comment Template' :
    'prefix': 'Comment'
    'body': """
      // =============================================================================
      // Comment Goes Here ===========================================================
      """
  # Create post Type Template
  'New Post Type Template' :
    'prefix': 'New Post Type'
    'body': """
      function create_post_type_template() {
        register_post_type('Post Type',
          array(
            'labels' => array(
              'name' => __('Post Type'),
              'singular_name' => __('Post Type')
            ),
            'public' => true,
            'has_archive' => true,
            'supports' => array( 'title','thumbnail' ),
          )
        );
      }
      add_action('init', 'create_post_type_template');
      """
  # Custom Image Sizes Template
  'Custom Image Sizes' :
    'prefix': 'Custom Image Sizes'
    'body': """
      add_theme_support('post-thumbnails');

      //Duplicate these and change name to add new Image Sizes
      add_image_size('slider-slide', 350, 350, true);
      add_image_size('slider-modal', 500, 500, true);

      add_filter('image_size_names_choose', 'custom_image_sizes');

      //This Adds The image size to the media library
      function custom_image_sizes ($sizes) {
        return array_merge( $sizes, array (
          'slider-slide' => __('Slide 350px'),
          'slide-modal' => __('Slide 500px'),
        ));
      }
      """

#Css Stuff
'.source.css':
  #Avada Elements
  'fusion-column-wrapper':
    'prefix': 'fusion-column-wrapper'
    'body': 'fusion-column-wrapper'
  'fusion-column':
    'prefix': 'fusion-column'
    'body': 'fusion-column'

#React Stuff
".source.js, .source.jsx, .source.ts, .source.tsx":
  "New Component":
    prefix: "_component"
    body: "export class --Component-- extends React.Component{}"
